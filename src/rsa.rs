use simple_asn1::{ASN1Block, BigInt, oid, to_der};

pub fn rsa_spki_der(n: &[u8]) -> Option<Vec<u8>> {
    // let mut sequence = Vec::new();
    let oid = oid!(1, 2, 840, 113549, 1, 1, 1);
    let algorithm_identifier = ASN1Block::Sequence(
        0,
        vec![ASN1Block::ObjectIdentifier(0, oid), ASN1Block::Null(0)],
    );
    let n = ASN1Block::Integer(0, BigInt::from_signed_bytes_be(n));
    let e = ASN1Block::Integer(0, BigInt::from(65537_u32));
    let rsa_public_key = ASN1Block::Sequence(0, vec![n, e]);
    let rsa_public_key_bits = to_der(&rsa_public_key).ok()?;
    let subject_public_key =
        ASN1Block::BitString(0, rsa_public_key_bits.len() * 8, rsa_public_key_bits);
    let subject_public_key_info =
        ASN1Block::Sequence(0, vec![algorithm_identifier, subject_public_key]);
    to_der(&subject_public_key_info).ok()
}

#[cfg(test)]
mod tests {
    use super::*;
    use rsa_der::public_key_to_der;

    #[test]
    fn test_encode() {
        let n = vec![
            0xfb, 0x11, 0x99, 0xff, 0x07, 0x33, 0xf6, 0xe8, 0x05, 0xa4, 0xfd, 0x3b, 0x36, 0xca,
            0x68, 0xe9, 0x4d, 0x7b, 0x97, 0x46, 0x21, 0x16, 0x21, 0x69, 0xc7, 0x15, 0x38, 0xa5,
            0x39, 0x37, 0x2e, 0x27, 0xf3, 0xf5, 0x1d, 0xf3, 0xb0, 0x8b, 0x2e, 0x11, 0x1c, 0x2d,
            0x6b, 0xbf, 0x9f, 0x58, 0x87, 0xf1, 0x3a, 0x8d, 0xb4, 0xf1, 0xeb, 0x6d, 0xfe, 0x38,
            0x6c, 0x92, 0x25, 0x68, 0x75, 0x21, 0x2d, 0xdd, 0x00, 0x46, 0x87, 0x85, 0xc1, 0x8a,
            0x9c, 0x96, 0xa2, 0x92, 0xb0, 0x67, 0xdd, 0xc7, 0x1d, 0xa0, 0xd5, 0x64, 0x00, 0x0b,
            0x8b, 0xfd, 0x80, 0xfb, 0x14, 0xc1, 0xb5, 0x67, 0x44, 0xa3, 0xb5, 0xc6, 0x52, 0xe8,
            0xca, 0x0e, 0xf0, 0xb6, 0xfd, 0xa6, 0x4a, 0xba, 0x47, 0xe3, 0xa4, 0xe8, 0x94, 0x23,
            0xc0, 0x21, 0x2c, 0x07, 0xe3, 0x9a, 0x57, 0x03, 0xfd, 0x46, 0x75, 0x40, 0xf8, 0x74,
            0x98, 0x7b, 0x20, 0x95, 0x13, 0x42, 0x9a, 0x90, 0xb0, 0x9b, 0x04, 0x97, 0x03, 0xd5,
            0x4d, 0x9a, 0x1c, 0xfe, 0x3e, 0x20, 0x7e, 0x0e, 0x69, 0x78, 0x59, 0x69, 0xca, 0x5b,
            0xf5, 0x47, 0xa3, 0x6b, 0xa3, 0x4d, 0x7c, 0x6a, 0xef, 0xe7, 0x9f, 0x31, 0x4e, 0x07,
            0xd9, 0xf9, 0xf2, 0xdd, 0x27, 0xb7, 0x29, 0x83, 0xac, 0x14, 0xf1, 0x46, 0x67, 0x54,
            0xcd, 0x41, 0x26, 0x25, 0x16, 0xe4, 0xa1, 0x5a, 0xb1, 0xcf, 0xb6, 0x22, 0xe6, 0x51,
            0xd3, 0xe8, 0x3f, 0xa0, 0x95, 0xda, 0x63, 0x0b, 0xd6, 0xd9, 0x3e, 0x97, 0xb0, 0xc8,
            0x22, 0xa5, 0xeb, 0x42, 0x12, 0xd4, 0x28, 0x30, 0x02, 0x78, 0xce, 0x6b, 0xa0, 0xcc,
            0x74, 0x90, 0xb8, 0x54, 0x58, 0x1f, 0x0f, 0xfb, 0x4b, 0xa3, 0xd4, 0x23, 0x65, 0x34,
            0xde, 0x09, 0x45, 0x99, 0x42, 0xef, 0x11, 0x5f, 0xaa, 0x23, 0x1b, 0x15, 0x15, 0x3d,
            0x67, 0x83, 0x7a, 0x63,
        ];
        let e = vec![0x01, 0x00, 0x01]; // 65537
        assert_eq!(public_key_to_der(&n, &e), rsa_spki_der(&n).unwrap());
    }
}
